<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/10/03/Element-UI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Element-UI的基本使用"><a href="#Element-UI的基本使用" class="headerlink" title="Element-UI的基本使用"></a>Element-UI的基本使用</h2><h3 id="什么是Element-UI？"><a href="#什么是Element-UI？" class="headerlink" title="什么是Element-UI？"></a>什么是Element-UI？</h3><p>Element-UI：一套为开发者，设计师和产品经理准备的基于Vue 2.0的桌面端组件库。</p>
<p>官方地址为：<a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></p>
<p>这些组件库封装了一些标准的样式 ，可以省去优化样式的时间，把时间更多的放在业务逻辑上，从而提高开发效率。</p>
<h3 id="Element-UI的安装"><a href="#Element-UI的安装" class="headerlink" title="Element-UI的安装"></a>Element-UI的安装</h3><h4 id="1-基于命令行方式手动安装"><a href="#1-基于命令行方式手动安装" class="headerlink" title="1.基于命令行方式手动安装"></a>1.基于命令行方式手动安装</h4><p>第一步：安装依赖包：<strong>npm i element-ui -S</strong></p>
<p>第二步：导入Element-UI相关资源：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入组件库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入组件相关样式 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置Vue插件</span></span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>

<p>第三步：在App.vue中放入组件代码  这里以一个button组件代码为例  运行<strong>npm run serve</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201003151917617.png" alt="image-20201003151917617"></p>
<h4 id="2-基于图形化界面自动安装"><a href="#2-基于图形化界面自动安装" class="headerlink" title="2.基于图形化界面自动安装"></a>2.基于图形化界面自动安装</h4><p>第一步：运行 <strong>vue ui</strong> 命令，打开图形化界面</p>
<p>第二步：通过Vue项目管理器 ，进入具体的项目配置面板</p>
<p>第三步：点击 <strong>插件</strong> –&gt;<strong>添加插件</strong> ，进入插件查询面板</p>
<p>第四步：搜索<strong>vue-cli-plugin-element</strong>并安装</p>
<p>第五步:配置插件，实现按需导入，从而减少打包后项目的体积 如图：</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201003152920071.png" alt="image-20201003152920071"></p>
<p>第六步：测试是否安装成功</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201003153159477.png" alt="image-20201003153159477"></p>
<p>第七步：打开项目的main.js 发现新引入了一行<strong>import ‘./plugins/element.js’</strong>  ，然后ctrl +鼠标点击进入这个文件发现以下内容：</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201003153623310.png" alt="    "></p>
<p>这表示从<strong>element-ui</strong>中按需导入了<strong>button</strong>组件并且把button注册成了Vue的组件文件，这样的话每一个组件中都可以使用button按钮了。</p>
<p>接下来把拷过来的button代码放到App.vue中进行验证：</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201003155521638.png" alt="image-20201003155521638"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/10/03/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h2><h3 id="脚手架的基本语法"><a href="#脚手架的基本语法" class="headerlink" title="脚手架的基本语法"></a>脚手架的基本语法</h3><p>vue脚手架用于快速生成Vue项目基础架构，其官网地址为：https：//cli.vue.js.org/zh/</p>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><p><strong>1.安装3.x版本的Vue脚手架</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>



<p><strong>2.基于3.x版本的脚手架创建vue项目</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.基于交互式命令的方式，创建 新版 vue 项目</span></span><br><span class="line">vue create my-project</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.基于图形化界面的方式，创建 新版 vue 项目</span></span><br><span class="line">vue ui</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.基于2.x的旧模板，创建 旧版 vue 项目(了解就行)</span></span><br><span class="line">npm install -g @vue/cli-init</span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure>



<h3 id="Vue脚手架生成的项目结构分析"><a href="#Vue脚手架生成的项目结构分析" class="headerlink" title="Vue脚手架生成的项目结构分析"></a>Vue脚手架生成的项目结构分析</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201003144346652.png" alt="image-20201003144346652"></p>
<h3 id="Vue脚手架的自定义配置"><a href="#Vue脚手架的自定义配置" class="headerlink" title="Vue脚手架的自定义配置"></a>Vue脚手架的自定义配置</h3><h4 id="1-通过package-json配置项目"><a href="#1-通过package-json配置项目" class="headerlink" title="1.通过package.json配置项目"></a>1.通过package.json配置项目</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//必须是符合规范的json语法  下面是配置运行后浏览器自动打开界面</span></span><br><span class="line">&quot;vue&quot;:&#123;</span><br><span class="line">	&quot;devServer&quot;:&#123;</span><br><span class="line">        &quot;port&quot;:&quot;8888&quot;,</span><br><span class="line">        &quot;open&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：不推荐使用这种配置方式，因为package.json 主要用来管理<strong>包的配置信息</strong>；为了<strong>方便后期维护</strong>，推荐将vue脚手架相关的配置，单独定义到vue.config.js配置文件中。</p>
<h4 id="2-通过vue-config-js配置项目"><a href="#2-通过vue-config-js配置项目" class="headerlink" title="2.通过vue.config.js配置项目"></a>2.通过vue.config.js配置项目</h4><p>第一步：在根目录新建一个vue.config.js的文件</p>
<p>第二步：在vue.config.js中进行下面的配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;   <span class="comment">//向外暴露配置</span></span><br><span class="line">    devServer:&#123;</span><br><span class="line">        open:<span class="literal">true</span>,</span><br><span class="line">        port:<span class="number">8848</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>…Vue脚手架的基本用法和配置就在这里了</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/10/02/webpack%20%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="webpack-加载器"><a href="#webpack-加载器" class="headerlink" title="webpack 加载器"></a>webpack 加载器</h2><p>通过loader打包非js模块</p>
<p>在实际开发过程中 webpack默认只能打包处理以.js后缀名结尾的模块，其他的非.js后缀名结尾的模块，webpack默认处理不了，需要使用loader加载器才能正常打包，否则会报错。</p>
<h3 id="webpack中加载器的基本使用"><a href="#webpack中加载器的基本使用" class="headerlink" title="webpack中加载器的基本使用"></a>webpack中加载器的基本使用</h3><h4 id="1-打包处理css文件"><a href="#1-打包处理css文件" class="headerlink" title="1 打包处理css文件"></a><strong>1 打包处理css文件</strong></h4><p>第一步：运行 npm i style-loader  css-loader -D命令，安装处理css文件的loader</p>
<p>第二步：在webpack.config.js的module-&gt;rules数组中，添加loader规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    <span class="comment">//这里test表示文件匹配类型 用的正则表达式 use表示要调用的loader</span></span><br><span class="line">    rules:[</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//##注意：use中loader的顺序是固定的  因为当多个loader时其中的调用顺序是从后往前调用 这里应该是先调用css-loader 再调用style-loader</span></span><br></pre></td></tr></table></figure>



<h4 id="2-打包和处理less文件-less和scss一样，都是样式的预编语言"><a href="#2-打包和处理less文件-less和scss一样，都是样式的预编语言" class="headerlink" title="2.打包和处理less文件  (less和scss一样，都是样式的预编语言)"></a><strong>2.打包和处理less文件</strong>  (less和scss一样，都是样式的预编语言)</h4><p>第一步：运行 npm i less-loader less -D命令，安装处理less文件的loader，这里less是less-loader的内置依赖项</p>
<p>第二步：在webpack.config.js的module-&gt;rules数组中，添加loader规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    <span class="comment">//这里test表示文件匹配类型 用的正则表达式 use表示要调用的loader</span></span><br><span class="line">    rules:[</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-打包和处理scss文件-文件是scss-包是sass-不要混淆"><a href="#3-打包和处理scss文件-文件是scss-包是sass-不要混淆" class="headerlink" title="3.打包和处理scss文件(文件是scss 包是sass 不要混淆)"></a><strong>3.打包和处理scss文件</strong>(文件是scss 包是sass 不要混淆)</h4><p>第一步：运行 npm i sass-loader node-sass -D命令，安装处理scss文件的loader</p>
<p>第二步：在webpack.config.js的module-&gt;rules数组中，添加loader规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    <span class="comment">//这里test表示文件匹配类型 用的正则表达式 use表示要调用的loader</span></span><br><span class="line">    rules:[</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-配置postcss自动添加css的兼容前缀"><a href="#4-配置postcss自动添加css的兼容前缀" class="headerlink" title="4.配置postcss自动添加css的兼容前缀"></a><strong>4.配置postcss自动添加css的兼容前缀</strong></h4><p>第一步：运行 npm i postcss-loader autoprefixer -D命令，安装处理css兼容前缀的文件的loader</p>
<p>第二步：在项目根目录中创建一个postcss的配置文件postcss.config.js,并初始化如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer= <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)  <span class="comment">//导入自动添加前缀的插件</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;  <span class="comment">//向外暴露配置对象</span></span><br><span class="line">    plugins:[autoprefixer]  <span class="comment">//挂载插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：在webpack.config.js的module-&gt;rules数组中，修改css的loader规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;postcss-loader&#x27;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>第一步有一个版本问题  默认安装的时最新版本的autoprefixer 使用最新版本的话可能会出现bug 导致css加载器无法使用  这时候可以<strong>降低</strong>autoprefixer的版本  执行以下命令：<strong>npm install <a href="mailto:&#97;&#x75;&#116;&#x6f;&#112;&#x72;&#x65;&#x66;&#105;&#120;&#101;&#114;&#64;&#x39;&#x2e;&#56;&#46;&#54;">&#97;&#x75;&#116;&#x6f;&#112;&#x72;&#x65;&#x66;&#105;&#120;&#101;&#114;&#64;&#x39;&#x2e;&#56;&#46;&#54;</a> -D</strong></p>
<h4 id="5-打包样式表中的图片和字体文件"><a href="#5-打包样式表中的图片和字体文件" class="headerlink" title="5.打包样式表中的图片和字体文件"></a><strong>5.打包样式表中的图片和字体文件</strong></h4><p>第一步：运行 npm i url-loader file-loader -D命令</p>
<p>第二步：在webpack.config.js的module-&gt;rules数组中，添加loader规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span>,use:[<span class="string">&#x27;url-loader?limit=16940&#x27;</span>]&#125;</span><br><span class="line"><span class="comment">//其中？之后的是loader的参数项， limit用来指定图片的大小，单位是字节（byte），只有小于limit大小的图片，才会被转为base64图片</span></span><br></pre></td></tr></table></figure>



<h4 id="6-打包与处理js文件中的高级语法"><a href="#6-打包与处理js文件中的高级语法" class="headerlink" title="6.打包与处理js文件中的高级语法"></a>6.打包与处理js文件中的高级语法</h4><p>第一步：安装babel转换器相关的包：npm i babel-loader @babel/core @babel/runtime -D</p>
<p>第二步：安装babel语法插件相关的包：npm i @babel/preset-env @babel/plugin-transform-runtime  @babel/plugin-proposal-class-properties -D</p>
<p>第三步：在项目根目录中，创建babel配置文件babel.config.js并初始化配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    presets:[<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">    plugins:[<span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>,<span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四步：在webpack.config.js的module-&gt;rules数组中，添加loader规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">     rules:[</span><br><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>, use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;postcss-loader&#x27;</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]&#125;,    &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span>,use:[<span class="string">&#x27;url-loader?limit=139265&#x27;</span>]&#125;,</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,use:<span class="string">&#x27;babel-loader&#x27;</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-webpack中配置vue组件的加载器"><a href="#7-webpack中配置vue组件的加载器" class="headerlink" title="7.webpack中配置vue组件的加载器"></a>7.webpack中配置vue组件的加载器</h4><p>第一步：运行npm i vue-loader vue-template-compiler -D 命令</p>
<p>第二步：在webpack.config.js配置文件中，添加vue-loader的配置项如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>) <span class="comment">//引入插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,loader:<span class="string">&#x27;vue-loader&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins:[</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()  <span class="comment">//确保引入此插件！</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>……以上就是webpack加载器中比较常用的配置</p>
]]></content>
  </entry>
</search>
